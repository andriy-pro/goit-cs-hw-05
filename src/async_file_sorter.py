import argparse
import asyncio
import datetime
import logging
import os
import shutil
import sys
import time
from pathlib import Path
from typing import Set

from aiopath import AsyncPath

from config import FILE_SORTER

# –ü–æ–∫—Ä–∞—â–µ–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, FILE_SORTER["LOG_CONFIG"]["LEVEL"]),
    format=FILE_SORTER["LOG_CONFIG"]["FORMAT"],
    handlers=[
        logging.FileHandler(FILE_SORTER["LOG_CONFIG"]["LOG_FILE"]),
        logging.StreamHandler(sys.stdout),
    ],
)


class RecursionDepthExceeded(Exception):
    """–í–∏–Ω—è—Ç–æ–∫, —â–æ –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –Ω–∞–¥–º—ñ—Ä–Ω—ñ–π –≥–ª–∏–±–∏–Ω—ñ —Ä–µ–∫—É—Ä—Å—ñ—ó."""


class FileOperationError(Exception):
    """–í–∏–Ω—è—Ç–æ–∫, –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏ –Ω–∞–¥ —Ñ–∞–π–ª–∞–º–∏."""


def get_script_dir() -> Path:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—É, –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç."""
    return Path(__file__).parent.resolve()


async def create_default_output_folder() -> AsyncPath:
    """
    –°—Ç–≤–æ—Ä—é—î –¥–µ—Ñ–æ–ª—Ç–Ω—É –ø–∞–ø–∫—É –≤ —Ç–µ—Ü—ñ 'output' –∑ –¥–∞—Ç–æ—é –π —á–∞—Å–æ–º.
    """
    script_dir = get_script_dir()
    timestamp = datetime.datetime.now().strftime(FILE_SORTER["DATETIME_FORMAT"])
    folder_name = f"{FILE_SORTER['DEFAULT_OUTPUT_DIR_PREFIX']}{timestamp}"

    output_base = script_dir / "output"
    output_base.mkdir(parents=True, exist_ok=True)

    folder = AsyncPath(output_base / folder_name)
    await folder.mkdir(parents=True, exist_ok=True)
    return folder


def parse_args():
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    """
    parser = argparse.ArgumentParser(
        description="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º."
    )
    script_dir = get_script_dir()
    default_source = script_dir / "input" / "test"
    parser.add_argument(
        "source_folder",
        type=str,
        nargs="?",
        default=str(default_source),
        help="–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: input/test/ —É —Ç–µ—Ü—ñ —Å–∫—Ä–∏–ø—Ç–∞).",
    )
    parser.add_argument(
        "--output_folder",
        type=str,
        help="–®–ª—è—Ö –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: output/sorted_files_<timestamp> —É —Ç–µ—Ü—ñ —Å–∫—Ä–∏–ø—Ç–∞).",
    )
    return parser.parse_args()


class TimingContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π."""

    def __init__(self, operation_name: str, level: str = "DEBUG"):
        self.operation_name = operation_name
        self.level = level
        self.start_time = None

    async def __aenter__(self):
        self.start_time = time.time()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        duration = time.time() - self.start_time
        getattr(logging, self.level.lower())(
            f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {self.operation_name}: {duration:.4f} —Å–µ–∫—É–Ω–¥"
        )
        if self.operation_name == "–≤—Å—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç—É":
            # –ó–∞–ø–∏—Å—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            with open(FILE_SORTER["PERFORMANCE_LOG_FILE"], "a") as f:
                f.write(f"{datetime.datetime.now()}, {duration:.2f}\n")


async def copy_file(file: AsyncPath, output_folder: AsyncPath):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —á–∞—Å—É."""
    async with TimingContext(f"–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {file}"):
        try:
            if not await file.exists():
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {file}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É
            if not os.access(str(file), os.R_OK):
                raise PermissionError(f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {file}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è
            stat = await file.stat()
            free_space = shutil.disk_usage(str(output_folder))[2]
            if stat.st_size > free_space:
                raise OSError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {file}")

            ext = file.suffix.lstrip(".").lower() or "no_extension"
            target_dir = output_folder / ext
            await target_dir.mkdir(parents=True, exist_ok=True)

            await asyncio.to_thread(
                shutil.copy2, str(file), str(target_dir / file.name)
            )
            logging.info(f"–§–∞–π–ª {file} —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ {target_dir}.")

        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ {file}: {e}"
            logging.error(error_msg)
            raise FileOperationError(error_msg) from e


async def read_folder(
    source_folder: AsyncPath,
    output_folder: AsyncPath,
    depth: int = 0,
    processed_dirs: Set[str] = None,
):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≥–ª–∏–±–∏–Ω–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é —Ñ–∞–π–ª—ñ–≤.
    """
    if processed_dirs is None:
        processed_dirs = set()

    if depth > FILE_SORTER["MAX_RECURSION_DEPTH"]:
        raise RecursionDepthExceeded(
            f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≥–ª–∏–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å—ñ—ó: {depth}"
        )

    real_path = str(await source_folder.resolve())
    if real_path in processed_dirs:
        logging.warning(f"–í–∏—è–≤–ª–µ–Ω–æ —Ü–∏–∫–ª—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {source_folder}")
        return

    processed_dirs.add(real_path)
    tasks = []

    try:
        async for item in source_folder.iterdir():
            if await item.is_symlink():
                logging.info(f"–ü—Ä–æ–ø—É—Å–∫ —Å–∏–º–≤–æ–ª—ñ—á–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {item}")
                continue
            if await item.is_dir():
                tasks.append(
                    read_folder(item, output_folder, depth + 1, processed_dirs)
                )
            else:
                tasks.append(copy_file(item, output_folder))
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó {source_folder}: {e}")
        raise

    await asyncio.gather(*tasks)


def print_directory_tree(directory: Path, indent=""):
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, –æ—Å–∫—ñ–ª—å–∫–∏ –ª–∏—à–µ –≤–∏–≤—ñ–¥).
    """
    for item in sorted(directory.iterdir()):
        if item.is_dir():
            print(f"{indent}üìÅ {item.name}")
            print_directory_tree(item, indent + "    ")
        else:
            print(f"{indent}üìÑ {item.name}")


async def main():
    async with TimingContext("–≤—Å—å–æ–≥–æ —Å–∫—Ä–∏–ø—Ç—É", level="INFO"):
        try:
            args = parse_args()
            script_dir = get_script_dir()

            # Setup input directory
            input_dir = script_dir / "input"
            test_dir = input_dir / "test"
            input_dir.mkdir(parents=True, exist_ok=True)
            test_dir.mkdir(parents=True, exist_ok=True)

            # Setup source directory
            source_path = Path(args.source_folder)
            if not source_path.is_absolute():
                source_path = script_dir / source_path
            source_path = source_path.resolve()

            if not source_path.exists():
                source_path.mkdir(parents=True, exist_ok=True)
                logging.info(f"Created source directory: {source_path}")

            if not source_path.is_dir():
                logging.error(f"Source path is not a directory: {source_path}")
                return 1

            source_folder = AsyncPath(str(source_path))
            logging.info(f"Using source folder: {source_folder}")

            # Setup output directory
            if args.output_folder:
                output_path = Path(args.output_folder)
                if not output_path.is_absolute():
                    output_path = script_dir / output_path
                output_path = output_path.resolve()
                output_path.mkdir(parents=True, exist_ok=True)
                output_folder = AsyncPath(str(output_path))
            else:
                output_folder = await create_default_output_folder()

            logging.info(f"Using output folder: {output_folder}")

            # Print initial structure
            print("\nStructure before sorting:")
            if source_path.exists():  # Check again as it might have been just created
                print_directory_tree(source_path)
            else:
                print("Source directory is empty")

            # Perform sorting
            try:
                async with TimingContext("sorting files"):
                    await read_folder(source_folder, output_folder)

                # Print final structure
                print("\nStructure after sorting:")
                output_path = Path(str(output_folder))
                if output_path.exists() and any(output_path.iterdir()):
                    print_directory_tree(output_path)
                else:
                    print("No files were sorted")

                return 0

            except RecursionDepthExceeded as e:
                logging.error(f"Maximum recursion depth exceeded: {e}")
                return 1
            except FileOperationError as e:
                logging.error(f"File operation error: {e}")
                return 1
            except Exception as e:
                logging.error(f"Error during sorting: {e}")
                return 1

        except Exception as e:
            logging.error(f"Unexpected error in main: {e}", exc_info=True)
            return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        logging.critical(f"Critical error: {e}", exc_info=True)
        sys.exit(1)
